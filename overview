Belum bisa :
week 7 exercise 01
week 7 exercise 08 print belum sesuai
week 8 exercise 16
week 9 exercise 26
week 10 exercise 34 can't read file

Note :
week 7 exercise 5 test failed

Week 7
- Recap basic (Loop, method, class, object etc)
- Refactoring
- Primitive- and reference-type variables
    Java is a strongly typed language, what this means is that all of its variables have a type
        2 types : primitive-type and reference-type variables
    both have slot.
        Primitive-type variables hold the concrete value in their slot,
            int, double, char, boolean, short, float, byte and long
        reference-type variables hold a reference to a concrete object.
- Hashmap
    HashMap<key, value>
    HashMap<String, Book> map = new HashMap<String, Book>();
    methods
        get(key) return value
        containskey(key) return boolean
        values() Returns a set of values in the HashMap
        keySet() return set of keys
        size()
    HashMap keys and stored objects are reference-type variables
        int -> Integer, double -> Double, char -> Character
        Java encapsulates original-type values and translates them into reference-type in Hashmap
        auto-boxing = translation of original-type variables into reference-type ones
        make sure the value is not null when tranlating reference-type to original-type. Use containsKey method

Week 8
- Override
    has to have the same method signature (name of the method, and the number and type of it's parameters)
- Equals Method
    type casting to change the type of the Object reference
        Object getClass method
        WantedType variable = (WantedType) oldVariable;
- ArrayList contains method
    compares objects through the equals method.
    need equals method in object to use arraylist contains method
- hashCode Method
    HashMap uses the Object class hashCode() method to find a key value
    hashCode method in a way that it assigns the same value to all the objects whose content is regarded as similar
    takes an object and returns a numeric value, return int. Need numeric values when using object as HashMap keys
    Default implementation creates an index based on the reference, different objects with the same content receive different hashCode method outputs
    When using String and Integer objects as HashMap keys, their hashCode method is implemented by default
    get(key) method with custom object as key
        The class which works as key must overwrite both the equals method and the hashCode method
- Interface
    Week 8 Exercise 11
    Interface is an instrument we have to define the functionality our classes SHOULD HAVE
    Interface class finine the method names and return values, but they do not contain method implementation and access modifier
    The classes which implement an interface decide in which way the methods defined in the interface have to be implemented
- An Interface as Variable Type
    class SMS implements the interface Readable, it has two types: SMS and Readable
    Readable readable = new SMS("teacher", "The SMS is Readable!");
- An Interface as Method Parameter
    parameter can be whatever class instance which implements the interface
        Box box = new Box(10);
        box.add( new Book("Fedor Dostojevski", "Crime and Punishment", 2) ) ;
- An Interface as Method Return Value
    example : Factory class, which can be used to produce different objects (CD, book etc) that implement the interface Item
- Using interfaces while programming permits us to reduce the number of dependences among our classes
- Made-Up Interfaces
    List
        ArrayList implements the List
            List<String> strings = new LinkedList<String>();
    Map
        HashMaps implement the Map interface
    Set
        A collection that contains no duplicate elements
    Collection
        List and Set interfaces implement the Collection interface
        Collection interface provides contains and size method
        We can parse any class which implements the Collection interface with a for-each loop.
- Generics
    Allow type (Integer, String, â€¦ or user defined types) to be a parameter to methods, classes and interfaces
    use <> to specify parameter types in generic class creation
    ArrayList and HashMap use generic
    public class Slot<T>
         we have to give a type parameter to the constructor of the class Slot
    Slot<String> string = new Slot<String>();
        create slot object
- Generics Interface
    Interface Comparable<T>
    Parameter: T - the type of objects that this object may be compared to
    Collections.sort uses the compareTo method to define key order
    implement Comparable and override compareTo method
    Example: public class ClubMember implements Comparable<ClubMember> { ... }
        The interface requires the method compareTo, which returns an integer that tells us the comparison order
            compareTo return negative number if this object is smaller than its parameter object, return zero if equal
        Collections.sort(clubMembersList);
    Sort String
        Implement compareTo, and use compareToIgnoreCase method
    Compare object value
        Implement compareTo method
    Multiple comparison
        use different classes which implement the interface Comparator<...> to execute the comparison
            sort method now receives as second parameter an object of the class that determines the sorting order
            Collections.sort(cards, new SortAgainstSuit() );
        https://docs.oracle.com/javase/tutorial/collections/interfaces/order.html
- Collection Binary Search
    method binarySearch() makes use of the Comparable interface to retieve objects
    If the object's compareTo() returns 0, i.e. if it is the same object, the key is considered found

Week 9
- Single Responsibility Principle
     Each class should have only one clear role
     Each class should have only one reason to be modified
- Organising Classes into Packages
     split the source code files into packages according to their functionality, use, and other logical reasons
- Interfaces are also types
    All the objects which are created from classes that implement an interface also have that interface's type
- Many Interfaces, and Interface Flexibility
- Exceptions
    try { } catch (Exception e) { }
        try block can possibly go through an exception
        catch block tells how we handle an exception, and it tells us what exception we should be prepared for
        The exception information is saved into the e variable
        The class Exception can provide useful methods
            method printStackTrace() prints a path which tells us where the exception came from
    Exceptions are such situations where the program executions is different from our expectations
    code in the catch chunk is executed only in case of exception -- otherwise the program do not arrive till there.
- Throwing Exceptions
    Methods and constructors can throw exceptions
    delegating exceptions responsibility to the method caller using "throws Exception" after method parameter
    When we dont have to handle exception
        throw new [Exception name]
        IllegalArgumentException, IllegalStateException, NumberFormatException
- Exceptions and Interfaces
    If an interface defines the throws Exception attributes for the methods,
        the classes which implement the interface must be defined in the same way.
        However, they do not have to throw an exception
- Reading a File
    Scanner reader = new Scanner(new File("filename.txt"));
    Scanner class constructor public Scanner(File source) throws a FileNotFoundException
        we have either to handle it or throw it forward
    When we read or when save something into a file, Java has to find out the character set used by the operating system
        "UTF-8" is the most common, contains both the alphabet letters of everyday use
- save ArrayLists as hashmap value
    Map<String, ArrayList<String>>, or Map<String, List<String>>
        map.put(string, new HashSet<Integer>());  // map an empty arraylist
        map.get(string).add(value);               // add value to list
    List is an interface which defines the List functionality, and ArrayLists implement this interface
    concrete classes (HashMap and ArrayList), interfaces (Map and List)
- Sets
    Differently from lists, in a Set the same object can not be contained twice in a set
    Similarity between two objects is inspected using the methods equals and hashCode
    One of the classes which implement the Set interface is HashSet
        Set<Integer> set = new HashSet<Integer>();
    Hashmap with set values
        Map<String, Set<Integer>> map = new HashMap<String, Set<Integer>>();
            map.put(string, new HashSet<Integer>());  // map an empty set first, use containsKey method to check if key already exist
            map.get(string).add(value);               // add value to set
- One Object in Many Lists, Map, or Set
    object variable are reference-type, which means that the variable memorize reference to the object
    If we put an object into an ArrayList, the List does not memorize the object itself, but the reference to the object

Week 10
- Object Polymorphism
    all objects are Object-type. If an object is a particular type, we can also represent it as Object-type
        Object string = "one string";
    Variables have got their own type, and in addition to it they also have got the type of their parent classes and interfaces
    The class String derives from the Object class, and therefore String objects are also Object-type
    String class implements the interfaces Serializable, CharSequence, and Comparable<String>. An interface is a type, too
- Inheritance of Class Features
    Each Java's class descends from the class Object, each class create has all methods which are defined in Object
        To change the functionality of the methods defined in Object, we have to Override them
    In addition to be possible to inherit the Object class, it is also possible to inherit other classes
    The class features are inherited using the keyword "extends"
        The class which inherits is called subclass; the class which is inherited is called superclass
    In subsclass constructor, keyword "super" in the first line is used to call the superclass constructor
        Superclass object variables are assigned a value. After doing this, we assign a value to the object variable in subclass
    When the subclass inherits the superclass, it receives all the methods provides by superclass
    If a method or a variable have got the private field accessibility, its subclasses do not have any straight way to access it
    Use the "protected" to define superclass variables or methods whose accessibility should be restricted to only its subclasses
    Calling the Superclass Methods
        The method defined in the superclass can always be called using the super prefix
            super.toString()
- Polymorphism
    The ability of an object to take on many forms. Most commonly used when parent class reference is used to refer to a child class object.
    The execution method is always chosen based on the object real type. That is the type of the variable which saved the reference
        First look for method in the object real type, if not found, move to the superclass. If not found, move to the parent parent class
- When Do We Have to Use Inheritance?
    Inheritance is a tool to build and qualify object hierarchy; a subclass is always a special instance of the superclass
    Through inheritance, a subclass receives the superclass functionality
    Devoloping hierachy, you have to make sure the Single Responsibility Principle applies
    Exercise 30: Container. Interesting exercise
- Inheritance and Interfaces
    exercise farmSimulatur, nice exercise
        use IllegalStateException to handle null object
        use Collection interface, ArrayList and LinkedList implement the interface Collection
- Abstract Class
    Abstract classes combine interfaces and inheritance
    An abstract class can contain both normal and abstract methods
    In general, we use abstract classes when the object they represent is not a clear, self-defined concept.
        In such cases, it is not possible to create instances of it.
    Both when we define abstract classes and abstract methods, we use the keyword abstract
    The difference between interfaces and abstract classes
        it is possible to define the functionality of abstract classes, we can use them to define the default implementation, for instance
- Removing Objects from an ArrayList
    The objects which have to be deleted are gathered together while we parse the list,
        and the remove operation is executed only after parsing the list.

Week 11
- Writing a file
    use write method in FileWriter class to write a file
    use Scanner and File class to read a file
- User Interfaces using Swing
    Managing Action Events
    (important) Separating Application and UI Logic
        As the single responsibility principle states: each class should have only one clear responsibility
        